#+TITLE: Config

Place your private configuration here! Remember, you do not need to run =doom sync= after modifying this file!

* User Data

Some functionality uses this to identify you, e.g.GPG configuration, email clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Wahidyan Kresna Fridayoka"
      user-mail-address "wahidyankf@gmail.com")
#+END_SRC

* Theme

** Font

Doom exposes five(optional) variables for controlling fonts in Doom.Here
are the three important ones:

- =doom-font=
- =doom-variable-pitch-font=
- =doom-big-font=
  - used for =doom-big-font-mode=
  - use this for presentations or streaming.

They all accept either a =font-spec=, =font string("Input Mono-12")=, or =xlfd= font string. You generally only need these two:

#+BEGIN_EXAMPLE emacs-lisp
(setq doom-font
  (font-spec :family "monospace" :size 12 :weight 'semi-light)
  doom-variable-pitch-font (font-spec :family "sans" :size 13)
  )
#+End_example

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Dank Mono" :size 12))
#+END_SRC

** Template

There are two ways to load a theme.Both assume the theme is installed and available.You can either set =doom-theme= or manually load a theme with the =load-theme= function. This is the default:

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC


This determines the style of line numbers in effect. If set to =nil=, line numbers are disabled. For relative line numbers, set this to =relative=.

** Line Numbering

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

** Doom Message

Here are some additional functions / macros that could help you configure Doom:
- =load!= for loading external *.el files relative to this one
- =use-package= for configuring packages
  - =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to this file.Emacs searches the=load-path= when you load packages with =require= or =use-package=.
- =map!= for binding new keys

** Display

#+BEGIN_SRC emacs-lisp
(display-time-mode)
(display-battery-mode)
#+END_SRC

* General
** Utility Functions

#+BEGIN_SRC emacs-lisp
(defun wkf-evil-window-vsplit ()
  (interactive)
  (evil-window-vsplit)
  (evil-window-right 1)
  )

(defun wkf-evil-window-split ()
  (interactive)
  (evil-window-split)
  (evil-window-down 1)
  )
#+END_SRC

** Window

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "<backspace> \\") 'wkf-evil-window-vsplit)
(define-key evil-normal-state-map (kbd "<backspace> -") 'wkf-evil-window-split)
(define-key evil-normal-state-map (kbd "<backspace> =") 'balance-windows)
#+END_SRC

** Frame

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "<backspace> fn") 'make-frame-command)
(define-key evil-normal-state-map (kbd "<backspace> fo") 'other-frame)
(define-key evil-normal-state-map (kbd "<backspace> fdd") 'delete-frame)
(define-key evil-normal-state-map (kbd "<backspace> fdo") 'delete-other-frames)
#+END_SRC

** Editing

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd ",w") 'save-buffer)
(define-key evil-normal-state-map (kbd ",q") 'delete-window)
#+END_SRC

* Wakatime
#+BEGIN_SRC emacs-lisp
(use-package! wakatime-mode
  :hook (after-init . global-wakatime-mode))
#+END_SRC
* LSP Mode
** LSP Mode

#+BEGIN_SRC emacs-lisp
(use-package! lsp-mode
  :hook
  (reason-mode . lsp)
  :config
  (lsp-register-client
    (make-lsp-client :new-connection (lsp-stdio-connection "ocamllsp")
                  :major-modes '(tuareg-mode)
                  :notification-handlers (ht ("client/registerCapability" 'ignore))
                  :priority 1
                  :server-id 'ocaml-ls))
  :config
  (lsp-register-client
    (make-lsp-client :new-connection (lsp-stdio-connection "~/.doom.d/rls-macos/reason-language-server")
                  :major-modes '(reason-mode)
                  :notification-handlers (ht ("client/registerCapability" 'ignore))
                  :priority 1
                  :server-id 'reason-ls)
    )
  :commands (lsp-mode lsp-define-stdio-client)
  )
#+END_SRC

** LSP UI

#+BEGIN_SRC emacs-lisp
(use-package! lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (set-lookup-handlers! 'lsp-ui-mode
                        :definition #'lsp-ui-peek-find-definitions
                        :references #'lsp-ui-peek-find-references)
  (setq lsp-ui-doc-max-height 16
         lsp-ui-doc-max-width 50
         lsp-ui-sideline-ignore-duplicate t))
#+END_SRC

** Company LSP

#+BEGIN_SRC emacs-lisp
(use-package! company-lsp
  :after lsp-mode
  :config
  (set-company-backend! 'lsp-mode 'company-lsp)
  (setq company-lsp-enable-recompletion t))
#+END_SRC

** DAP Mode

#+BEGIN_SRC emacs-lisp
(use-package! dap-mode
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))
#+END_SRC

** ReasonML

#+BEGIN_SRC emacs-lisp
(use-package! reason-mode
  :mode "\\.re$"
  :hook
  (before-save . (lambda ()
                   (when (equal major-mode 'reason-mode)
                     (refmt)))))
#+END_SRC

** TypeScript

#+BEGIN_SRC emacs-lisp
(use-package! lsp-typescript
  :when (featurep! +javascript)
  :hook ((js2-mode typescript-mode) . lsp-typescript-enable))
#+END_SRC

** CSS

#+BEGIN_SRC emacs-lisp
(use-package! lsp-css
  :when (featurep! +css)
  :hook ((css-mode less-mode scss-mode) . lsp-css-enable))
#+END_SRC

** Sh

#+BEGIN_SRC emacs-lisp
(when (featurep! +sh)
  (after! sh-script
    (lsp-define-stdio-client lsp-sh
                            #'projectile-project-root
                            '("bash-language-server" "start"))
    (add-hook 'sh-mode-hook #'lsp-sh-enable)))
#+END_SRC

** Misc

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press =K= (non-evil users must press =C-c g k=). This will open documentation for it, including demos of how they are used.

#+BEGIN_SRC emacs-lisp
(defun wkf-gd ()
  (interactive)
  (+lookup/definition (doom-thing-at-point-or-region))
  (evil-window-split)
  (evil-jump-backward-swap)
  (evil-window-down 1)
  (balance-windows)
  (recenter)
)

(define-key evil-normal-state-map (kbd "K") 'lsp-ui-doc-glance)
(define-key evil-normal-state-map (kbd ",gd") 'wkf-gd)
#+END_SRC

* Org Mode

** Directory

If you use =org= and don't want your org files in the default location below, change =org-directory=. It must be set before org loads!

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/wkf-org/")
#+END_SRC

** Open at Point

#+BEGIN_SRC emacs-lisp
(defun wkf-org-open-at-point ()
  (interactive)
  (evil-window-vsplit)
  (evil-window-right 1)
  (org-open-at-point)
  (balance-windows)
  )

(evil-define-key 'normal org-mode-map (kbd "<backspace> o") 'wkf-org-open-at-point)
#+END_SRC
* DeadGrep

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd ",dgg") 'deadgrep)
(define-key evil-normal-state-map (kbd ",dgr") 'deadgrep-restart)
#+END_SRC
