#+TITLE: WKF - Doom Emacs - Config

* User Data

Some functionality uses this to identify us (e.g.GPG configuration, email clients, file templates and snippets).

#+BEGIN_SRC emacs-lisp :results silent
(setq user-full-name "Wahidyan Kresna Fridayoka" user-mail-address "wahidyankf@gmail.com")
#+END_SRC

* Theming

** Base

#+BEGIN_SRC emacs-lisp :results silent
;; make emacs fullscreen on startup.
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; default: doom-one
(setq doom-theme 'doom-gruvbox)
#+END_SRC

** Font

*** Explanation

Doom exposes five(optional) variables for controlling fonts in Doom.Here are the three important ones:

- =doom-font=
- =doom-variable-pitch-font=
- =doom-big-font=
  - used for =doom-big-font-mode=
  - use this for presentations or streaming.

They all accept either a =font-spec=, =font string("Input Mono-12")=, or =xlfd= font string. You generally only need these two:

#+BEGIN_EXAMPLE emacs-lisp :results silent
(setq doom-font
  (font-spec :family "monospace" :size 12 :weight 'semi-light)
  doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+End_example

*** Config

#+BEGIN_SRC emacs-lisp :results silent
;; the mighty dank-mono
(setq doom-font (font-spec :family "Dank Mono"
                           :size 12))
#+END_SRC

** Auto Revert

Setup the auto-revert settings

#+BEGIN_SRC emacs-lisp :results silent
(setq global-auto-revert-mode t)
(setq auto-revert-mode t)
#+END_SRC

** Editor

Config text editor's preference.

#+BEGIN_SRC emacs-lisp :results silent
(blink-cursor-mode t)
(setq display-line-numbers-type 'relative)
(setq-default indicate-empty-lines t)
(setq-default show-trailing-whitespace t)

(which-key-add-key-based-replacements
  ", /" "search-nohl")

(define-key evil-normal-state-map (kbd ", /") 'evil-ex-nohighlight)
#+END_SRC

** Doom Modeline

Show battery and time on the bottom.

#+BEGIN_SRC emacs-lisp :results silent
(display-time-mode)
(display-battery-mode)
#+END_SRC


* Window Management

** Frame

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  "<backspace> f" "frame")
(which-key-add-key-based-replacements
  "<backspace> f d" "frame-delete")
(which-key-add-key-based-replacements
  "<backspace> f f" "frame-cycle")
(which-key-add-key-based-replacements
  "<backspace> f n" "frame-new")
(which-key-add-key-based-replacements
  "<backspace> f d d" "frame-delete-current")
(which-key-add-key-based-replacements
  "<backspace> f d o" "frame-delete-other")

;; Frame New
(define-key evil-normal-state-map (kbd "<backspace> f n") 'make-frame-command)
;; Frame Frame (cycle)
(define-key evil-normal-state-map (kbd "<backspace> f f") 'other-frame)
;; Frame Delete Delete (current)
(define-key evil-normal-state-map (kbd "<backspace> f d d") 'delete-frame)
;; Frame Delete Other
(define-key evil-normal-state-map (kbd "<backspace> f d o") 'delete-other-frames)
#+END_SRC

** Window

*** Splitting

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/window-vsplit ()
  "VSplit then focus on the right pane"
  (interactive)
  (evil-window-vsplit)
  (evil-window-right 1))

(defun wkf/window-split ()
  "Split then focus on the bottom pane"
  (interactive)
  (evil-window-split)
  (evil-window-down 1))

(which-key-add-key-based-replacements
  ", x" "window-vsplit-and-focus")
(which-key-add-key-based-replacements
  ", v" "window-split-and-focus")
(which-key-add-key-based-replacements
  ", =" "window-balance")

;; | (vertical)
(define-key evil-normal-state-map (kbd ", v") 'wkf/window-vsplit)
;; - (horizontal)
(define-key evil-normal-state-map (kbd ", x") 'wkf/window-split)
;; = (equal)
(define-key evil-normal-state-map (kbd ", =") 'balance-windows)
#+END_SRC

*** Closing

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/window-close-left ()
  "Close the pane on the left"
  (interactive)
  (evil-window-left 1)
  (evil-window-delete))

(defun wkf/window-close-below ()
  "Close the pane below"
  (interactive)
  (evil-window-down 1)
  (delete-window))

(defun wkf/window-close-above ()
  "Close the pane above"
  (interactive)
  (evil-window-up 1)
  (evil-window-delete))

(defun wkf/window-close-right ()
  "Close the pane on the right"
  (interactive)
  (evil-window-right 1)
  (evil-window-delete))

(which-key-add-key-based-replacements
  ", q" "quit-window")
(which-key-add-key-based-replacements
  ", q h" "quit-window-left")
(which-key-add-key-based-replacements
  ", q j" "quit-window-below")
(which-key-add-key-based-replacements
  ", q k" "quit-window-above")
(which-key-add-key-based-replacements
  ", q l" "quit-window-right")
(which-key-add-key-based-replacements
  ", q q" "quit-window-current")
(which-key-add-key-based-replacements
  ", q c" "quit-window-compilation")

;; quit h
(define-key evil-normal-state-map (kbd ", q h") 'wkf/window-close-left)
;; quit j
(define-key evil-normal-state-map (kbd ", q j") 'wkf/window-close-below)
;; quit k
(define-key evil-normal-state-map (kbd ", q k") 'wkf/window-close-above)
;; quit l
(define-key evil-normal-state-map (kbd ", q l") 'wkf/window-close-right)
;; quit current
(define-key evil-normal-state-map (kbd ", q q") 'delete-window)
;; quit compile
(define-key evil-normal-state-map (kbd ", q c") 'wkf/window-close-compilation)
#+END_SRC

** Buffer

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/buffer-close-all ()
  "Kill all buffer except current."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer)
                           (remove-if-not 'buffer-file-name (buffer-list))))
  (delete-other-windows))

(defun wkf/buffer-info ()
  "Get current buffer info"
  (interactive)
  (message (format "b: %s, p: %s" (buffer-name)
                   (buffer-file-name))))

(which-key-add-key-based-replacements
  ", b" "buffer")
(which-key-add-key-based-replacements
  ", b i" "buffer-info")
(which-key-add-key-based-replacements
  ", b b" "buffer-revert")
(which-key-add-key-based-replacements
  ", b c" "buffer-close")

;; Get current buffer's info
(define-key evil-normal-state-map (kbd ", b i") 'wkf/buffer-info)
;; Revert/Reload buffer
(define-key evil-normal-state-map (kbd ", b b") 'revert-buffer)
#+END_SRC

** Pop Up

#+BEGIN_SRC emacs-lisp :results silent
(setq-default left-margin-width 1 right-margin-width 1)
(set-window-buffer nil (current-buffer))
(add-hook! '+popup-buffer-mode-hook (set-window-margins (selected-window) 1 1))

(setq wkf/popup-size-xs 0.10)
(setq wkf/popup-size-s 0.175)
(setq wkf/popup-size-m 0.25)
(setq wkf/popup-size-l 0.35)
(setq wkf/popup-size-xl 0.45)
(setq wkf/popup-size-xxl 0.65)
(setq wkf/popup-size-xxxl 0.75)

(set-popup-rule! "^\\*compilation"
  :size wkf/popup-size-xs
  :side 'bottom)
(set-popup-rule! "^\\*doom:vterm-"
  :size wkf/popup-size-s)
(set-popup-rule! "^\\*format-all-errors"
  :size wkf/popup-size-s
  :side 'bottom)
(set-popup-rule! "^\\*Flycheck errors"
  :size wkf/popup-size-s
  :side 'bottom)
(set-popup-rule! "^\\*lsp-diagnostics"
  :size wkf/popup-size-s
  :side 'bottom)
(set-popup-rule! "^\\*eshell"
  :size wkf/popup-size-s
  :side 'bottom)
(set-popup-rule! "^\\*terminal"
  :size wkf/popup-size-s
  :side 'bottom)
(set-popup-rule! "^\\*info"
  :size wkf/popup-size-xl
  :side 'right)
(set-popup-rule! "^\\*doom:scratch"
  :size wkf/popup-size-s
  :side 'bottom)

(add-hook 'org-mode-hook (lambda ()
                           (set-popup-rule! "^\\*Org Src"
                             :size wkf/popup-size-xxxl
                             :side 'bottom)))

(defun wkf/popup-size (size)
  "Change default popup size"
  (interactive)
  (set-popup-rule! "^\\*"
    :size size))

(which-key-add-key-based-replacements "<backspace> p" "popup")
(which-key-add-key-based-replacements "<backspace> p s" "popup-size")
(which-key-add-key-based-replacements "<backspace> p s s" "popup-size-s")
(which-key-add-key-based-replacements "<backspace> p s m" "popup-size-m")
(which-key-add-key-based-replacements "<backspace> p s l" "popup-size-l")
(which-key-add-key-based-replacements "<backspace> p s x" "popup-size-xl")
(which-key-add-key-based-replacements "<backspace> p s X" "popup-size-xxl")

(define-key evil-normal-state-map (kbd "<backspace> p s s")
  (lambda ()
    (interactive)
    (wkf/popup-size wkf/popup-size-s)))
(define-key evil-normal-state-map (kbd "<backspace> p s m")
  (lambda ()
    (interactive)
    (wkf/popup-size wkf/popup-size-m)))
(define-key evil-normal-state-map (kbd "<backspace> p s l")
  (lambda ()
    (interactive)
    (wkf/popup-size wkf/popup-size-l)))
(define-key evil-normal-state-map (kbd "<backspace> p s x")
  (lambda ()
    (interactive)
    (wkf/popup-size wkf/popup-size-xl)))
(define-key evil-normal-state-map (kbd "<backspace> p s X")
  (lambda ()
    (interactive)
    (wkf/popup-size wkf/popup-size-xxl)))
;; popup q
(define-key evil-normal-state-map (kbd "<backspace> p q") '+popup/close-all)
#+END_SRC

** Workspace

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  ", ," "workspace")

(define-key evil-normal-state-map (kbd ", , ,") '+workspace/display)
(define-key evil-normal-state-map (kbd ", , 0") '+workspace/switch-to-final)
(define-key evil-normal-state-map (kbd ", , 1") '+workspace/switch-to-0)
(define-key evil-normal-state-map (kbd ", , 2") '+workspace/switch-to-1)
(define-key evil-normal-state-map (kbd ", , 3") '+workspace/switch-to-2)
(define-key evil-normal-state-map (kbd ", , 4") '+workspace/switch-to-3)
(define-key evil-normal-state-map (kbd ", , 5") '+workspace/switch-to-4)
(define-key evil-normal-state-map (kbd ", , 6") '+workspace/switch-to-5)
(define-key evil-normal-state-map (kbd ", , 7") '+workspace/switch-to-6)
(define-key evil-normal-state-map (kbd ", , 8") '+workspace/switch-to-7)
(define-key evil-normal-state-map (kbd ", , 9") '+workspace/switch-to-8)
(define-key evil-normal-state-map (kbd ", , R") '+workspace/restore-last-session)
(define-key evil-normal-state-map (kbd ", , h") '+workspace/switch-left)
(define-key evil-normal-state-map (kbd ", , l") '+workspace/switch-right)
(define-key evil-normal-state-map (kbd ", , d") '+workspace/delete)
(define-key evil-normal-state-map (kbd ", , o") '+workspace/load)
(define-key evil-normal-state-map (kbd ", , n") '+workspace/new)
(define-key evil-normal-state-map (kbd ", , r") '+workspace/rename)
(define-key evil-normal-state-map (kbd ", , s") '+workspace/save)
(define-key evil-normal-state-map (kbd ", , x") '+workspace/kill-session)
(define-key evil-normal-state-map (kbd ", , H") '+workspace/swap-left)
(define-key evil-normal-state-map (kbd ", , L") '+workspace/swap-right)
#+END_SRC

* Terminal

** Enviroment

Make sure eshell and mx-compile use zsh (copied alias)

#+BEGIN_SRC emacs-lisp :results silent
(setq shell-file-name "zsh")
(setq shell-command-switch "-ic")
#+END_SRC

** Management

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/vterm-open-vertical ()
  "Open vterm in vertical split"
  (interactive)
  (evil-normal-state)
  (wkf/window-vsplit)
  (+vterm/here (buffer-name)))

(defun wkf/vterm-open-horizontal ()
  "Open vterm in horizontal split"
  (interactive)
  (evil-normal-state)
  (wkf/window-split)
  (+vterm/here (buffer-name)))

(defun wkf/vterm-close-main ()
  "Close vterm pane"
  (interactive)
  (delete-windows-on "*doom:vterm-popup:main*"))

(defun wkf/vterm-close-compilation ()
  "Close interactive compilation pane"
  (interactive)
  (kill-matching-buffers "^\\vterm"))

(which-key-add-key-based-replacements
  ", t" "terminal")
(which-key-add-key-based-replacements
  ", t t" "terminal-popup")
(which-key-add-key-based-replacements
  ", t T" "terminal-here")
(which-key-add-key-based-replacements
  ", t v" "terminal-vsplit")
(which-key-add-key-based-replacements
  ", t x" "terminal-split")
(which-key-add-key-based-replacements
  ", t q" "terminal-quit")
(which-key-add-key-based-replacements
  ", t q q" "terminal-quit-current")
(which-key-add-key-based-replacements
  ", t q c" "terminal-quit-compilation")

;; terminal (mini)
(define-key evil-normal-state-map (kbd ", t t") '+vterm/toggle)
;; Terminal (max)
(define-key evil-normal-state-map (kbd ", t T") '+vterm/here)
;; Terminal Vertical
(define-key evil-normal-state-map (kbd ", t v") 'wkf/vterm-open-vertical)
;; Terminal Horizontal
(define-key evil-normal-state-map (kbd ", t x") 'wkf/vterm-open-horizontal)
;; Terminal main Close
(define-key evil-normal-state-map (kbd ", t q q") 'wkf/vterm-close-main)
;; Terminal main Close
(define-key evil-normal-state-map (kbd ", t q c") 'wkf/vterm-close-compilation)
#+END_SRC

* File

** Config

#+BEGIN_SRC emacs-lisp :results silent
(setq wkf/file-zshrc "~/.zshrc")
(setq wkf/file-doom-init-el "~/.doom.d/init.el")
(setq wkf/file-doom-packages-el "~/.doom.d/packages.el")
(setq wkf/file-doom-config-el "~/.doom.d/config.el")
(setq wkf/file-doom-config-org "~/.doom.d/config.org")
(setq wkf/file-doom-scratch-el "~/.doom.d/scratch.el")

(defun wkf/windows-rebalance ()
  "Recenter windows"
  (interactive)
  (recenter))

(defun wkf/find-file-vsplit (filename)
  "Search filename and open it in the right vsp"
  (interactive)
  (wkf/window-vsplit)
  (find-file filename)
  (wkf/windows-rebalance))

(defun wkf/find-file-split (filename)
  "Search filename and open it in the right vsp"
  (interactive)
  (wkf/window-split)
  (find-file filename)
  (wkf/windows-rebalance))

(defun wkf/find-config (open-in filename)
  "Open my zshrc in current buffer"
  (interactive)
  (cond ((equal open-in "v")
         (wkf/find-file-vsplit filename))
        ((equal open-in "x")
         (wkf/find-file-split filename))
        ((equal open-in "e")
         (find-file filename))))

(which-key-add-key-based-replacements "<backspace> c" "config-open")
(which-key-add-key-based-replacements "<backspace> c z" "config-open-zshrc")
(which-key-add-key-based-replacements "<backspace> c z e" "config-open-zshrc-current-buffer")
(which-key-add-key-based-replacements "<backspace> c z v" "config-open-zshrc-vsplit")
(which-key-add-key-based-replacements "<backspace> c z x" "config-open-zshrc-split")
(which-key-add-key-based-replacements "<backspace> c e" "config-open-emacs")
(which-key-add-key-based-replacements "<backspace> c e i" "config-open-emacs-init")
(which-key-add-key-based-replacements "<backspace> c e i v" "config-open-emacs-init-vsplit")
(which-key-add-key-based-replacements "<backspace> c e i x" "config-open-emacs-init-split")
(which-key-add-key-based-replacements "<backspace> c e p" "config-open-emacs-packages")
(which-key-add-key-based-replacements "<backspace> c e p v" "config-open-emacs-packages-vsplit")
(which-key-add-key-based-replacements "<backspace> c e p x" "config-open-emacs-packages-split")
(which-key-add-key-based-replacements "<backspace> c e c" "config-open-emacs-config-org")
(which-key-add-key-based-replacements "<backspace> c e c v" "config-open-emacs-config-org-vsplit")
(which-key-add-key-based-replacements "<backspace> c e c x" "config-open-emacs-config-org-split")
(which-key-add-key-based-replacements "<backspace> c e C" "config-open-emacs-config-el")
(which-key-add-key-based-replacements "<backspace> c e C v" "config-open-emacs-config-el-vsplit")
(which-key-add-key-based-replacements "<backspace> c e C x" "config-open-emacs-config-el-split")
(which-key-add-key-based-replacements "<backspace> c e s" "config-open-emacs-scratch")
(which-key-add-key-based-replacements "<backspace> c e s v" "config-open-emacs-scratch-vsplit")
(which-key-add-key-based-replacements "<backspace> c e s x" "config-open-emacs-scratch-split")

;; Config ZSH
(define-key evil-normal-state-map (kbd "<backspace> c z e")
  (lambda ()
    (interactive)
    (wkf/find-config "e" wkf/file-zshrc)))
(define-key evil-normal-state-map (kbd "<backspace> c z v")
  (lambda ()
    (interactive)
    (wkf/find-config "v" wkf/file-zshrc)))
(define-key evil-normal-state-map (kbd "<backspace> c z x")
  (lambda ()
    (interactive)
    (wkf/find-config "x" wkf/file-zshrc)))
;; Config Emacs Init.el
(define-key evil-normal-state-map (kbd "<backspace> c e i e")
  (lambda ()
    (interactive)
    (wkf/find-config "e" wkf/file-doom-init-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e i v")
  (lambda ()
    (interactive)
    (wkf/find-config "v" wkf/file-doom-init-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e i x")
  (lambda ()
    (interactive)
    (wkf/find-config "x" wkf/file-doom-init-el)))
;; Config Emacs Packages.el
(define-key evil-normal-state-map (kbd "<backspace> c e p e")
  (lambda ()
    (interactive)
    (wkf/find-config "e" wkf/file-doom-packages-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e p v")
  (lambda ()
    (interactive)
    (wkf/find-config "v" wkf/file-doom-packages-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e p x")
  (lambda ()
    (interactive)
    (wkf/find-config "x" wkf/file-doom-packages-el)))
;; Config Emacs Config.org
(define-key evil-normal-state-map (kbd "<backspace> c e c e")
  (lambda ()
    (interactive)
    (wkf/find-config "e" wkf/file-doom-config-org)))
(define-key evil-normal-state-map (kbd "<backspace> c e c v")
  (lambda ()
    (interactive)
    (wkf/find-config "v" wkf/file-doom-config-org)))
(define-key evil-normal-state-map (kbd "<backspace> c e c x")
  (lambda ()
    (interactive)
    (wkf/find-config "x" wkf/file-doom-config-org)))
;; Config Emacs Config.el (compiled version)
(define-key evil-normal-state-map (kbd "<backspace> c e C e")
  (lambda ()
    (interactive)
    (wkf/find-config "e" wkf/file-doom-config-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e C v")
  (lambda ()
    (interactive)
    (wkf/find-config "v" wkf/file-doom-config-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e C x")
  (lambda ()
    (interactive)
    (wkf/find-config "x" wkf/file-doom-config-el)))
;; Config Emacs Scratch.el
(define-key evil-normal-state-map (kbd "<backspace> c e s e")
  (lambda ()
    (interactive)
    (wkf/find-config "e" wkf/file-doom-scratch-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e s v")
  (lambda ()
    (interactive)
    (wkf/find-config "v" wkf/file-doom-scratch-el)))
(define-key evil-normal-state-map (kbd "<backspace> c e s x")
  (lambda ()
    (interactive)
    (wkf/find-config "x" wkf/file-doom-scratch-el)))
#+END_SRC

* Coding Experience

** Base

*** Elisp

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  ", e" "eval-elisp")

;; Eval last sexp
(define-key evil-normal-state-map (kbd ", e e") 'eval-last-sexp)
;; Eval buffer
(define-key evil-normal-state-map (kbd ", e b") 'eval-buffer)
;; Emacs Lisp Mode
(define-key evil-normal-state-map (kbd ", e m") 'emacs-lisp-mode)
#+END_SRC

*** LSP Mode

#+BEGIN_SRC emacs-lisp :results silent
(setq gc-cons-threshold 200000000)
(setq read-process-output-max (* 1024 1024))
(setq lsp-prefer-capf t)

(use-package! lsp-mode
  :hook (reason-mode . lsp)
  :hook (haskell-mode . lsp)
  :hook (tuareg-mode . lsp)
  :hook (elixir-mode . lsp)
  :config (lsp-register-client (make-lsp-client :new-connection (lsp-stdio-connection "ocamllsp")
                                                :major-modes '(tuareg-mode)
                                                :notification-handlers (ht ("client/registerCapability"
                                                                            'ignore))
                                                :priority 1
                                                :server-id 'ocaml-ls))
  :config (lsp-register-client (make-lsp-client :new-connection (lsp-stdio-connection
                                                                 "~/.doom.d/rls-macos/reason-language-server")
                                                :major-modes '(reason-mode)
                                                :notification-handlers (ht ("client/registerCapability"
                                                                            'ignore))
                                                :priority 1
                                                :server-id 'reason-ls))
  :config (lsp-register-client (make-lsp-client :new-connection (lsp-stdio-connection
                                                                 "~/.doom.d/elixir-ls/release/language_server.sh")
                                                :major-modes '(elixir-mode)
                                                :notification-handlers (ht ("client/registerCapability"
                                                                            'ignore))
                                                :priority 1
                                                :initialized-fn (lambda (workspace)
                                                                  (with-lsp-workspace workspace (let
                                                                                                    ((config
                                                                                                      `(:elixirLS
                                                                                                        (:mixEnv
                                                                                                         "dev"
                                                                                                         :dialyzerEnabled
                                                                                                         :json-false))))
                                                                                                  (lsp--set-configuration
                                                                                                   config))))
                                                :server-id 'elixir-ls))
  :config (setq lsp-lens-auto-enable t)
  :commands (lsp-mode lsp-define-stdio-client))
#+END_SRC

*** LSP UI

#+BEGIN_SRC emacs-lisp :results silent
(use-package! lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config (set-lookup-handlers! 'lsp-ui-mode
            :definition #'lsp-ui-peek-find-definitions
            :references #'lsp-ui-peek-find-references)
  (setq lsp-ui-doc-max-height 16 lsp-ui-doc-max-width 50 lsp-ui-sideline-ignore-duplicate t)
  (flycheck-credo-setup)
  (setq lsp-prefer-flymake nil))
#+END_SRC

*** Company LSP

#+BEGIN_SRC emacs-lisp :results silent
(use-package! company-lsp
  :after lsp-mode
  :config (set-company-backend! 'lsp-mode 'company-lsp)
  (setq company-lsp-enable-recompletion t))
#+END_SRC

*** Intellisense

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press =K= (non-evil users must press =C-c g k=). This will open documentation for it, including demos of how they are used.

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/gdef ()
  "Look up definition in the current window"
  (interactive)
  (cond ((equal major-mode 'reason-mode)
         (progn (evil-goto-definition)
                (recenter)))
        ((equal major-mode 'typescript-mode)
         (evil-goto-definition))
        (t (+lookup/definition (doom-thing-at-point-or-region)))))

(defun wkf/gdef-new-frame ()
  "Open +lookup/definition in the new frame"
  (interactive)
  (make-frame-command)
  (cond ((equal major-mode 'reason-mode)
         (progn (make-frame-command)
                (evil-goto-definition)
                (recenter)))
        ((equal major-mode 'typescript-mode)
         (evil-goto-definition))
        ((equal major-mode 'js2-mode)
         (+lookup/definition (doom-thing-at-point-or-region)))
        ((equal major-mode 'rjsx-mode)
         (+lookup/definition (doom-thing-at-point-or-region)))
        (t (+lookup/definition (doom-thing-at-point-or-region))))
  (recenter))

(defun wkf/gdef-split ()
  "Open +lookup/definition in the split window below"
  (interactive)
  (cond
   ((equal major-mode 'reason-mode)
    (progn (evil-goto-definition)
           (evil-window-split)
           (evil-jump-backward-swap)
           (evil-window-down 1)
           (balance-windows)
           (recenter)))
   ((equal major-mode 'typescript-mode)
    (progn (evil-goto-definition)
           (evil-window-split)
           (evil-jump-backward-swap)
           (evil-window-down 1)
           (balance-windows)
           (recenter)))
   ((equal major-mode 'js2-mode)
    (progn (+lookup/definition (doom-thing-at-point-or-region))
           (evil-window-split)
           (evil-jump-backward-swap)
           (evil-window-down 1)
           (balance-windows)
           (recenter)))
   ((equal major-mode 'rjsx-mode)
    (progn (+lookup/definition (doom-thing-at-point-or-region))
           (evil-window-split)
           (evil-jump-backward-swap)
           (evil-window-down 1)
           (balance-windows)))
   (t (progn (+lookup/definition (doom-thing-at-point-or-region))
             (evil-window-split)
             (evil-jump-backward-swap)
             (evil-window-down 1)
             (balance-windows)
             (recenter)))))

(defun wkf/gdoc-split ()
  "Open +lookup/documentation in the mini buffer"
  (interactive)
  (+lookup/documentation (doom-thing-at-point-or-region))
  (evil-window-down 1)
  (balance-windows)
  (recenter))

(which-key-add-key-based-replacements ", g" "goto")
(which-key-add-key-based-replacements ", g d" "goto-def-split")
(which-key-add-key-based-replacements ", g k" "goto-doc-split")
(which-key-add-key-based-replacements ", g D" "goto-def-new-frame")

;; Go to Definition in current pane
(define-key evil-normal-state-map (kbd "g d") 'wkf/gdef)
;; Go to Definition hsplit window
(define-key evil-normal-state-map (kbd ", g d") 'wkf/gdef-split)
;; Go to Dokumentation in current pane
(define-key evil-normal-state-map (kbd "g k") '+lookup/documentation)
;; Go to doKumentation
(define-key evil-normal-state-map (kbd ", g k") 'wkf/gdoc-split)
;; Go to Definition in the new frame
(define-key evil-normal-state-map (kbd ", g D") 'wkf/gdef-new-frame)
;; doKumentation
(define-key evil-normal-state-map (kbd "K") 'lsp-ui-doc-glance)
#+END_SRC

*** Save and Format

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/buffer-format ()
  "Format current buffer"
  (interactive)
  (cond ((equal major-mode 'reason-mode)
         (compile (format "bsrefmt --in-place %s" (buffer-file-name))))
        ((equal major-mode 'python-mode)
         (py-yapf-buffer))
        ((bound-and-true-p lsp-mode)
         (lsp-format-buffer))
        ((equal major-mode 'emacs-lisp-mode)
         (elisp-format-buffer))
        (t nil)))

(defun wkf/buffer-save-and-format ()
  "Format current buffer"
  (interactive)
  (cond ((equal major-mode 'reason-mode)
         (wkf/buffer-format))
        (t (wkf/buffer-format)))
  (save-buffer))

(which-key-add-key-based-replacements ", w" "buffer-save-and-format")
(which-key-add-key-based-replacements ", f" "format-current-buffer")

;; Write
(define-key evil-normal-state-map (kbd ", w") 'wkf/buffer-save-and-format)
;; Format
(define-key evil-normal-state-map (kbd ", f") 'wkf/buffer-format)
#+END_SRC

*** Compilation

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/window-close-compilation ()
  "Close compilation pane"
  (interactive)
  (delete-windows-on "*compilation*")
  (delete-windows-on "*Flycheck errors*"))

(defun wkf/window-show-compilation ()
  "Show compilation pane"
  (interactive)
  (display-buffer "*compilation*"))

(defun wkf/error-next ()
  "Go to next error"
  (interactive)
  (cond ((equal (buffer-name) "*compilation*")
         (compilation-next-error 1))
        (t (flycheck-next-error))))

(defun wkf/error-previous ()
  "Go to previous error"
  (interactive)
  (cond ((equal (buffer-name) "*compilation*")
         (compilation-previous-error 1))
        (t (flycheck-previous-error))))

(which-key-add-key-based-replacements ", c w" "compilation-window")
(which-key-add-key-based-replacements ", d c" "diagnosis-compilation")
(which-key-add-key-based-replacements ", d c n" "diagnosis-compilation-next")
(which-key-add-key-based-replacements ", d c p" "diagnosis-compilation-previous")

;; compilation window open
(define-key evil-normal-state-map (kbd ", c w") 'wkf/window-show-compilation)
;; error next
(define-key evil-normal-state-map (kbd ", d c n") 'wkf/error-next)
;; error previous
(define-key evil-normal-state-map (kbd ", d c p") 'wkf/error-previous)
#+END_SRC

*** Error Reporting

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  ", d" "diagnosis")

;; code diagnosis workspace
(define-key evil-normal-state-map (kbd ", d l") 'lsp-ui-flycheck-list)
;; code diagnosis local
(define-key evil-normal-state-map (kbd ", d L") 'flycheck-list-errors)
;; flycheck error - next
(define-key evil-normal-state-map (kbd ", d ]") 'flycheck-next-error)
;; flycheck error - next
(define-key evil-normal-state-map (kbd "] g") 'flycheck-next-error)
;; flycheck error - previous
(define-key evil-normal-state-map (kbd ", d [") 'flycheck-previous-error)
;; flycheck error - previous
(define-key evil-normal-state-map (kbd "[ g") 'flycheck-previous-error)
#+END_SRC

*** Compilation

**** Mnemonic

***** Raw Compile

#+BEGIN_EXAMPLE
, c . -> compile with last command
#+END_EXAMPLE

***** Test

#+BEGIN_EXAMPLE
, c t c -> test coverage
#+END_EXAMPLE

***** Compile File

#+BEGIN_EXAMPLE
, c c -> compile file
, c r r -> compile and run file
, c r i -> compile and run file interactively
, c q -> compile quick check file
, c b d -> build dev file
, c b r -> build release file
#+END_EXAMPLE

***** Compile Project

#+BEGIN_EXAMPLE
, C c -> compile project
, C r r -> compile and run project
, C r i -> compile and run project interactively
, C q -> compile quick project
, C b d -> build dev project
, C b r -> build release project
#+END_EXAMPLE

***** Run

#+BEGIN_EXAMPLE
, r r -> run file
, r i -> run file interactively
, R r -> run project
, R i -> run project interactively
#+END_EXAMPLE

***** Clean

#+BEGIN_EXAMPLE
, c l -> clean project
, c L -> hard clean project
#+END_EXAMPLE

**** Which-Key

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  ", m" "mode")
(which-key-add-key-based-replacements
  ", c t" "compile-file-test")
(which-key-add-key-based-replacements
  ", c t c" "compile-file-test-coverage")
(which-key-add-key-based-replacements
  ", c" "compile-file")
(which-key-add-key-based-replacements
  ", c c" "compile-file-default")
(which-key-add-key-based-replacements
  ", c r" "compile-file-and-run")
(which-key-add-key-based-replacements
  ", c r r" "compile-file-and-run-default")
(which-key-add-key-based-replacements
  ", c r i" "compile-file-and-run-interactive")
(which-key-add-key-based-replacements
  ", c q" "compile-file-and-run")
(which-key-add-key-based-replacements
  ", c b" "compile-file-build")
(which-key-add-key-based-replacements
  ", c b d" "compile-file-build-dev")
(which-key-add-key-based-replacements
  ", c b r" "compile-file-build-release")
(which-key-add-key-based-replacements
  ", r" "run-file")
(which-key-add-key-based-replacements
  ", r r" "run-file-default")
(which-key-add-key-based-replacements
  ", r i" "run-file-interactively")
(which-key-add-key-based-replacements
  ", C" "compile-project")
(which-key-add-key-based-replacements
  ", C c" "compile-project-default")
(which-key-add-key-based-replacements
  ", C r" "compile-project-and-run")
(which-key-add-key-based-replacements
  ", C r r" "compile-project-and-run-default")
(which-key-add-key-based-replacements
  ", C r i" "compile-project-and-run-interactive")
(which-key-add-key-based-replacements
  ", C q" "compile-project-quick")
(which-key-add-key-based-replacements
  ", C b" "compile-project-build")
(which-key-add-key-based-replacements
  ", C b d" "compile-project-build-dev")
(which-key-add-key-based-replacements
  ", C b r" "compile-project-build-release")
(which-key-add-key-based-replacements
  ", R" "run-project")
(which-key-add-key-based-replacements
  ", R r" "run-project-default")
(which-key-add-key-based-replacements
  ", R i" "run-project-interactively")
#+END_SRC

**** Commons

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/compile-interactively (cmd)
  (interactive)
  (progn (let ((term-buffer (vterm)))
           (set-buffer term-buffer)
           (term-send-raw-string cmd)
           (evil-normal-state))))

(which-key-add-key-based-replacements
  ", c ." "recompile-using-last-command")

;; compile compile (repeat)
(define-key evil-normal-state-map (kbd ", c .") 'recompile)
#+END_SRC

** Languages

*** Emacs Lisp

#+BEGIN_SRC emacs-lisp :results silent
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

*** ReasonML

**** Config and Utils

#+BEGIN_SRC emacs-lisp :results silent
(add-hook 'reason-mode-hook (lambda () ;; nil
                              (setq auto-revert-mode t)))

(use-package! reason-mode
  :mode "\\.re$"
  :hook (before-save . (lambda ()
                         (if (equal major-mode 'reason-mode) nil))))
#+END_SRC

*** OCaml

**** Setup

Install these using opam:

***** [[https://github.com/ocaml/merlin][Merlin]]

#+BEGIN_EXAMPLE sh :results output
opam install merlin
#+END_EXAMPLE

***** [[https://github.com/ocaml-ppx/ocamlformat][ocamlformat]]

#+BEGIN_EXAMPLE sh :results output
opam install ocamlformat
#+END_EXAMPLE

***** [[https://github.com/ocaml/ocaml-lsp][OCaml LSP]]

#+BEGIN_EXAMPLE sh :results output
opam pin add ocaml-lsp-server https://github.com/ocaml/ocaml-lsp.git && opam install ocaml-lsp-server
#+END_EXAMPLE

***** Another goodies (optional)

Basically following this: [[https://dev.realworldocaml.org/install.html][Real World OCaml - Installation]]

#+BEGIN_EXAMPLE sh :results output
opam install core utop && opam install async yojson core_extended core_bench cohttp async_graphics cryptokit menhir
#+END_EXAMPLE

***** Notes

As of this time, we cannot use ReasonML and OCaml version > 4.06.0 at the same time, thus, make sure that we are =opam switch=-ing to the correct version of opam

**** Keybindings

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/ocaml-compile-project ()
  "Compile ocaml project"
  (interactive)
  (compile (format "dune build")))

(defun wkf/ocaml-clean-project ()
  "Clean ocaml project"
  (interactive)
  (compile (format "dune clean")))

(defun wkf/ocaml-compile-and-run-file-interactive ()
  "Compile and run ocaml file - interactive"
  (interactive)
  (wkf/compile-interactively (format "dune exec ./%s.exe\n" (file-name-sans-extension
                                                            (buffer-name)))))

(defun wkf/ocaml-compile-and-run-file-default ()
  "Compile and run ocaml file - default"
  (interactive)
  (compile (format "dune build && dune exec ./%s.exe\n" (file-name-sans-extension (buffer-name)))))

(defun wkf/ocaml-compile-and-run-project-interactive ()
  "Compile and run ocaml project - interactive"
  (interactive)
  (wkf/compile-interactively "dune build && dune exec ./main.exe\n"))

(defun wkf/ocaml-compile-and-run-project-default ()
  "Compile and run ocaml project - default"
  (interactive)
  (compile "dune exec ./main.exe"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
;; compile and run project default
(evil-define-key 'normal tuareg-mode-map (kbd ", c r r")
  'wkf/ocaml-compile-and-run-file-default)
;; compile and run project interactively
(evil-define-key 'normal tuareg-mode-map (kbd ", c r i")
  'wkf/ocaml-compile-and-run-file-interactive)

;; compile project default
(evil-define-key 'normal tuareg-mode-map (kbd ", C c") 'wkf/ocaml-compile-project)
;; compile and run project default
(evil-define-key 'normal tuareg-mode-map (kbd ", C r r")
  'wkf/ocaml-compile-and-run-project-default)
;; compile and run project interactively
(evil-define-key 'normal tuareg-mode-map (kbd ", C r i")
  'wkf/ocaml-compile-and-run-project-interactive)
;; clean ocaml project using dune
(evil-define-key 'normal tuareg-mode-map (kbd ", C l") 'wkf/ocaml-clean-project)
#+END_SRC

*** Haskell

**** Config and Utils

#+BEGIN_SRC emacs-lisp :results silent
(use-package! lsp-haskell
  :after lsp-mode
  :config (setq lsp-haskell-process-path-hie "hie-wrapper")
  (lsp-haskell-set-formatter-floskell))
#+END_SRC

**** Keybindings

#+BEGIN_SRC emacs-lisp :results silent

;; type check haskell code for exhaustiveness
(defun wkf/haskell-typecheck-file ()
  "Compile haskell project (add exhaustiveness-check)"
  (interactive)
  (let* ((output-buffer (generate-new-buffer "*Async shell command*"))
         (proc (progn (compile (format
                                "ghc -fwarn-incomplete-patterns %s -e \"return \(\)\"; echo finished"
                                (buffer-file-name)))
                      (get-buffer-process output-buffer))))))

(defun wkf/haskell-compile-and-run-file-default ()
  "Run current haskell file - default"
  (interactive)
  (compile  (format "ghc %s && %s" (buffer-file-name)
                    (file-name-sans-extension buffer-file-name))))
(defun wkf/haskell-compile-and-run-file-interactive ()
  "Run current haskell file - interactive"
  (interactive)
  (wkf/compile-interactively (format "ghc %s && %s\n" (buffer-file-name)
                                     (file-name-sans-extension buffer-file-name))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
;; compile quick (typecheck) current file
(evil-define-key 'normal haskell-mode-map (kbd ", c q") 'wkf/haskell-typecheck-file)
;; compile and run current file
(evil-define-key 'normal haskell-mode-map (kbd ", c r r") 'wkf/haskell-compile-and-run-file-default)
(evil-define-key 'normal haskell-mode-map (kbd ", c r i") 'wkf/haskell-compile-and-run-file-interactive)
#+END_SRC

*** Typescript

**** Keybindings

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/ts-compile-project ()
  "compile typescript project"
  (interactive)
  (compile (format "yarn tsc")))

(defun wkf/ts-compile-and-run-file-default ()
  "compile and run current typescript file - default"
  (interactive)
  (compile (format "yarn ts-node %s" (buffer-file-name))))
(defun wkf/ts-compile-and-run-file-interactive ()
  "compile and run current typescript file - interactive"
  (interactive)
  (wkf/compile-interactively (format "yarn ts-node %s\n" (buffer-file-name))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
;; compile project
(evil-define-key 'normal typescript-mode-map (kbd ", C c") 'wkf/ts-compile-project)
;; compile and run current file
(evil-define-key 'normal typescript-mode-map (kbd ", c r r") 'wkf/ts-compile-and-run-file-default)
(evil-define-key 'normal typescript-mode-map (kbd ", c r i") 'wkf/ts-compile-and-run-file-interactive)
#+END_SRC

*** Golang

**** Keybindings

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/go-compile-project ()
  "compile current go project"
  (interactive)
  (compile (format "go build")))

(defun wkf/go-compile-file ()
  "compile current go file"
  (interactive)
  (compile (format "go build %s" (buffer-file-name))))

(defun wkf/go-compile-and-run-file-default ()
  "compile and run current go file - default"
  (interactive)
  (compile (format "go run %s" (buffer-file-name))))

(defun wkf/go-compile-and-run-file-interactive ()
  "compile and run current go file - interactive"
  (interactive)
  (let ((compile-command (format "go run %s" (buffer-file-name))))
    (wkf/compile-interactively (format "%s\n" compile-command))))

(defun wkf/go-run-file-default ()
  "run current go file - default"
  (interactive)
  (compile (file-name-sans-extension buffer-file-name)))

(defun wkf/go-run-file-interactive ()
  "run current go file - interactive"
  (interactive)
  (let ((compile-command (file-name-sans-extension buffer-file-name)))
    (wkf/compile-interactively (format "%s\n" compile-command))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
;; compile and run current file
(evil-define-key 'normal go-mode-map (kbd ", c r r") 'wkf/go-compile-and-run-file-default)
(evil-define-key 'normal go-mode-map (kbd ", c r i") 'wkf/go-compile-and-run-file-interactive)
;; run current file
(evil-define-key 'normal go-mode-map (kbd ", r r") 'wkf/go-run-file-default)
(evil-define-key 'normal go-mode-map (kbd ", r i") 'wkf/go-run-file-interactive )
;; compile current project
(evil-define-key 'normal go-mode-map (kbd ", C c") 'wkf/go-compile-project)
;; compile current file
(evil-define-key 'normal go-mode-map (kbd ", c c") 'wkf/go-compile-file)
#+END_SRC

*** Python

**** Config and Utils

#+BEGIN_SRC emacs-lisp :results silent
(set-popup-rule! "^\\*Anaconda"
  :size 0.20
  :side 'bottom)
#+END_SRC

*** Elixir

**** Config and Utils

More info: [[https://elixirforum.com/t/emacs-elixir-setup-configuration-wiki/19196][Elixir Forum]], [[https://adam.kruszewski.name/articles/2019-10-20-elixir-setup/][Adam Kruszewski's Config]]

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/update-elixir-language-server ()
  "Update elixir language server's binary"
  (interactive)
  (compile
   "cd ~/.doom.d/elixir-ls && git reset --hard HEAD && git pull origin master && mix deps.get && mix elixir_ls.release"))

(use-package! alchemist
  :after elixir-mode
  :hook (elixir-mode . alchemist-mode)
  :config (set-lookup-handlers! 'elixir-mode
            :definition #'alchemist-goto-definition-at-point
            :documentation #'alchemist-help-search-at-point)
  (set-eval-handler! 'elixir-mode #'alchemist-eval-region)
  (set-repl-handler! 'elixir-mode #'alchemist-iex-project-run)
  (setq alchemist-mix-env "dev")
  (setq alchemist-hooks-compile-on-save t)
  (map! :map elixir-mode-map
        :nv "m" alchemist-mode-keymap))

(use-package! exunit)

(set-popup-rule! "^\\*alchemist"
  :size 0.2)
#+END_SRC


**** Keybindings

#+BEGIN_SRC emacs-lisp :results silent
;; run current file
(evil-define-key 'normal elixir-mode-map (kbd ", r r") 'alchemist-eval-buffer)
#+END_SRC

*** Rust

**** Setup

***** [[https://github.com/rust-lang/rls][RLS (Rust Language Server)]]

RLS need to be installed first

#+BEGIN_EXAMPLE
rustup component add rls rust-analysis rust-src
#+END_EXAMPLE

***** [[https://rustup.rs/][RustUp]]

#+BEGIN_EXAMPLE
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#+END_EXAMPLE

***** Install the correct version of clippy

#+BEGIN_EXAMPLE
rustup install nightly

rustup component add --toolchain nightly clippy
#+END_EXAMPLE

***** Notes

Doom's Rust setup use rustic-mode. Here is the link to the docs: [[https://github.com/brotzeit/rustic][Rustic Mode]]

**** Keybindings

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/rust-compile-file ()
  "compile current rust file"
  (interactive)
  (compile (format "rustc %s" (buffer-file-name))))

(defun wkf/rust-compile-project ()
  "compile current rust project - development"
  (interactive)
  (compile "cargo build"))

(defun wkf/rust-build-development-project ()
  "build current rust project (development)"
  (interactive)
  (compile "cargo build"))

(defun wkf/rust-build-release-project ()
  "build current rust project (release)"
  (interactive)
  (compile "cargo build --release"))

(defun wkf/rust-run-file ()
  "run current rust file"
  (interactive)
  (compile (format "%s" (file-name-sans-extension buffer-file-name))))

(defun wkf/rust-compile-and-run-file ()
  "compile and run current rust file"
  (interactive)
  (compile (format "rustc %s && %s" (buffer-file-name)
                   (file-name-sans-extension buffer-file-name))))

(defun wkf/rust-compile-and-run-project ()
  "compile and run current rust project"
  (interactive)
  (compile "cargo run"))

(defun wkf/rust-quick-check-project ()
  "check current rust project"
  (interactive)
  (compile "cargo check"))
#+END_SRC

File

#+BEGIN_SRC emacs-lisp :results silent
;; compile - compile - file
(evil-define-key 'normal rustic-mode-map (kbd ", c c") 'wkf/rust-compile-file)
;; compile and run current file
(evil-define-key 'normal rustic-mode-map (kbd ", c r r") 'wkf/rust-compile-and-run-file)
;; run current file
(evil-define-key 'normal rustic-mode-map (kbd ", r r") 'wkf/rust-run-file)
#+END_SRC

Project

#+BEGIN_SRC emacs-lisp :results silent
;; compile - compile - file
(evil-define-key 'normal rustic-mode-map (kbd ", C c") 'wkf/rust-compile-project)
;; compile quick project
(evil-define-key 'normal rustic-mode-map (kbd ", C q") 'wkf/rust-quick-check-project)
;; compile and run current project
(evil-define-key 'normal rustic-mode-map (kbd ", C r r") 'wkf/rust-compile-and-run-project)
;; build - release - project
(evil-define-key 'normal rustic-mode-map (kbd ", c b r") 'wkf/rust-build-release-project-release)
;; build - development - project
(evil-define-key 'normal rustic-mode-map (kbd ", c b d") 'wkf/rust-build-development-project)
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  ", o" "org")
#+END_SRC

** Directory

If you use =org= and don't want your org files in the default location below, change =org-directory=. It must be set before org loads!

#+BEGIN_SRC emacs-lisp :results silent
(setq org-directory "~/wkf-org/")

(add-hook 'org-mode-hook (lambda ()
                           (set-popup-rule! "^\\*Org Src"
                             :size .75
                             :side 'bottom)
                           (setq org-log-done 'time)
                           (setq org-agenda-files (directory-files-recursively "~/wkf-org/"
                                                                               "\\.org$")))
)

(defun wkf/find-org-index ()
  "Open my org index in the right vsp"
  (interactive)
  (wkf/find-file "~/wkf-org/index.org"))

(which-key-add-key-based-replacements
  ", o e" "org-edit")
(which-key-add-key-based-replacements
  ", o e i" "org-edit-index")

;; Open index file
(define-key evil-normal-state-map (kbd ", o e i") 'wkf/find-org-index)
#+END_SRC

** Editing

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  ", o s" "org-src")
(which-key-add-key-based-replacements
  ", o s e" "org-src-edit-special")
(which-key-add-key-based-replacements
  ", o s f" "org-src-format")
(which-key-add-key-based-replacements
  ", o h" "org-heading")
(which-key-add-key-based-replacements
  ", o h h" "org-heading-insert")
(which-key-add-key-based-replacements
  ", o h s" "org-heading-sub-insert")

;; Org SRC edit special
(evil-define-key 'normal org-mode-map (kbd ", o s e") 'org-edit-special)
;; Org SRC Format
(evil-define-key 'normal org-mode-map (kbd ", o s f")
  (kbd ", o s e , w : q"))
;; Org heading
(evil-define-key 'normal org-mode-map (kbd ", o h h") 'org-insert-heading)
(evil-define-key 'normal org-mode-map (kbd ", o h s") 'org-insert-subheading)
#+END_SRC


** Images

#+BEGIN_SRC emacs-lisp :results silent
(setq org-image-actual-width (/ (display-pixel-width) 3))

(add-hook 'org-mode-hook 'org-display-user-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-redisplay-inline-images)

(which-key-add-key-based-replacements
  ", o i" "org-inline-images")
(which-key-add-key-based-replacements
  ", o i i" "org-inline-images-toggle")
(which-key-add-key-based-replacements
  ", o i y" "org-inline-images-display-yes")
(which-key-add-key-based-replacements
  ", o i n" "org-inline-images-display-no")

;; Org Images toggle(z)
(evil-define-key 'normal org-mode-map (kbd ", o i i") 'org-toggle-inline-images)
;; Org Images yes
(evil-define-key 'normal org-mode-map (kbd ", o i y") 'org-display-inline-images)
;; Org Images no
(evil-define-key 'normal org-mode-map (kbd ", o i n") 'org-remove-inline-images)
#+END_SRC

** Open at Point

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/org-open-at-point ()
  "Put org-mode's open at point's content to the right vsp"
  (interactive)
  (evil-window-vsplit)
  (evil-window-right 1)
  (org-open-at-point)
  (balance-windows))

(which-key-add-key-based-replacements
  ", o o" "org-open-at-point")

;; Org Open
(evil-define-key 'normal org-mode-map (kbd ", o o") 'wkf/org-open-at-point)
#+END_SRC

** Org Tree Slide

#+BEGIN_SRC emacs-lisp :results silent
;; disable the change slide effect, it is just cheesy
(setq org-tree-slide-slide-in-effect nil)
;; disable the header
(setq org-tree-slide-header nil)

(defun wkf/toggle-org-presentation ()
  "Toggle org-mode presentation's mode"
  (interactive)
  (if (bound-and-true-p org-tree-slide-mode)
      (progn
        ;; disable presentation mode
        (org-tree-slide-mode)
        (setq org-tree-slide-mode nil)
        (display-line-numbers-mode 'relative)
        (doom-modeline-mode))
    (progn
      ;; enable presentation mode
      (org-tree-slide-mode)
      (setq org-tree-slide-mode t)
      (display-line-numbers-mode -1)
      (doom-modeline-mode -1))))

;; Org Presentation
(evil-define-key 'normal org-mode-map (kbd ", o p") 'wkf/toggle-org-presentation)
;; >
(evil-define-key 'normal org-mode-map (kbd "s-.") 'org-tree-slide-move-next-tree)
;; <
(evil-define-key 'normal org-mode-map (kbd "s-,") 'org-tree-slide-move-previous-tree)
;; disable minify in org mode (to make the presentation slide-back miss-hit harmless)
(evil-define-key 'normal org-mode-map (kbd "s-m")
  (lambda ()
    (interactive)
    (message "minify frame manually disabled in org-mode")))
;; disable new buffer in org mode (to make the presentation slide-back miss-hit harmless)
(evil-define-key 'normal org-mode-map (kbd "s-n")
  (lambda ()
    (interactive)
    (message "create new buffer manually disabled in org-mode")))
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp :results silent
;; Git Wkf Update All
(defun wkf/git-wkf-update-all ()
  "auto-update all of my essential git repos"
  (interactive)
  (let* ((output-buffer (generate-new-buffer "*Async shell command*"))
         (proc (progn (compile (format "git_wkf_update_all"))
                      (get-buffer-process output-buffer))))))

(which-key-add-key-based-replacements
  "<backspace> g" "git")
(which-key-add-key-based-replacements
  "<backspace> g w" "git-wkf")
(which-key-add-key-based-replacements
  "<backspace> g w u" "git-wkf-update")
(which-key-add-key-based-replacements
  "<backspace> g w u a" "git-wkf-update-all")

(define-key evil-normal-state-map (kbd "<backspace> g w u a") 'wkf/git-wkf-update-all)
#+END_SRC

* Snippet

** Emacs Lisp
#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/org-src-elisp ()
  "Insert Org SRC for elisp"
  (interactive)
  (progn (insert "#+BEGIN_SRC emacs-lisp")
         (evil-normal-state)
         (evil-open-below 1)
         (insert "#+END_SRC")
         (evil-normal-state)
         (evil-open-above 1)))

(defun wkf/org-src-elisp-silent ()
  "Insert Org SRC for elisp"
  (interactive)
  (progn (insert "#+BEGIN_SRC emacs-lisp :results silent")
         (evil-normal-state)
         (evil-open-below 1)
         (insert "#+END_SRC")
         (evil-normal-state)
         (evil-open-above 1)))

(defun wkf/org-src-elisp-output ()
  "Insert Org SRC for elisp"
  (interactive)
  (progn (insert "#+BEGIN_SRC emacs-lisp :results output")
         (evil-normal-state)
         (evil-open-below 1)
         (insert "#+END_SRC")
         (evil-normal-state)
         (evil-open-above 1)))

(which-key-add-key-based-replacements
  "` e" "emacs")
(which-key-add-key-based-replacements
  "` e l" "emacs-lisp")
(which-key-add-key-based-replacements
  "` e l o" "emacs-lisp-org")
(which-key-add-key-based-replacements
  "` e l o s" "emacs-lisp-org-source")
(which-key-add-key-based-replacements
  "` e l o s i" "emacs-lisp-org-source-silent")
(which-key-add-key-based-replacements
  "` e l o s o" "emacs-lisp-org-source-output")
(which-key-add-key-based-replacements
  "` e l o s s" "emacs-lisp-org-source-default")

(evil-define-key 'normal org-mode-map (kbd "` e l o s i") 'wkf/org-src-elisp-silent)
(evil-define-key 'normal org-mode-map (kbd "` e l o s o") 'wkf/org-src-elisp-output)
(evil-define-key 'normal org-mode-map (kbd "` e l o s s") 'wkf/org-src-elisp)
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp :results silent
(defun wkf/org-src-sh ()
  "Insert Org SRC for sh"
  (interactive)
  (progn (insert "#+BEGIN_SRC sh :results output")
         (evil-normal-state)
         (evil-open-below 1)
         (insert "#+END_SRC")
         (evil-normal-state)
         (evil-open-above 1)))

(which-key-add-key-based-replacements
  "` s" "shell")
(which-key-add-key-based-replacements
  "` s h" "shell")
(which-key-add-key-based-replacements
  "` s h o" "shell-org")
(which-key-add-key-based-replacements
  "` s h o s" "shell-org-source")

(evil-define-key 'normal org-mode-map (kbd "` s h o s") 'wkf/org-src-sh)
#+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  "` j" "javascript")
(which-key-add-key-based-replacements
  "` j s" "javascript")
(which-key-add-key-based-replacements
  "` j s o" "javascript-org")
(which-key-add-key-based-replacements
  "` j s o s" "javascript-org-source")

(defun wkf/org-src-js ()
  "Insert Org SRC for javascript"
  (interactive)
  (progn (insert "#+BEGIN_SRC js :results output")
         (evil-normal-state)
         (evil-open-below 1)
         (insert "#+END_SRC")
         (evil-normal-state)
         (evil-open-above 1)))

(evil-define-key 'normal org-mode-map (kbd "` j s o s") 'wkf/org-src-js)

(defun wkf/js-comment-heading ()
  "Insert comment in JS that looks like a heading"
  (interactive)
  (progn (insert "// ---")
         (evil-normal-state)
         (evil-open-below 1)
         (insert "// ---")
         (evil-normal-state)
         (evil-open-below 1)
         (evil-normal-state)
         (evil-previous-line)
         (evil-open-above 1)
         (insert "// ")))

(which-key-add-key-based-replacements
  "` j s c" "javascript-comment")
(which-key-add-key-based-replacements
  "` j s c h" "javascript-comment-heading")

(evil-define-key 'normal typescript-mode-map (kbd "` j s c h") 'wkf/js-comment-heading)
(evil-define-key 'normal js2-mode-map (kbd "` j s c h") 'wkf/js-comment-heading)
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  "` m" "ocaml")
(which-key-add-key-based-replacements
  "` m l" "ocaml")
(which-key-add-key-based-replacements
  "` m l c" "ocaml-comment")
(which-key-add-key-based-replacements
  "` m l c h" "ocaml-comment-heading")

(defun wkf/ocaml-comment-heading ()
  "Insert comment in ocaml that looks like a heading"
  (interactive)
  (insert "(* ---  --- *)")
  (evil-normal-state)
  (evil-backward-char 6)
  (evil-insert-state))

(evil-define-key 'normal tuareg-mode-map (kbd "` m l c h") 'wkf/ocaml-comment-heading)
#+END_SRC

* Plugins

** Wakatime

#+BEGIN_SRC emacs-lisp :results silent
(use-package! wakatime-mode
  :hook (after-init . global-wakatime-mode))
#+END_SRC

** DeadGrep

#+BEGIN_SRC emacs-lisp :results silent
(which-key-add-key-based-replacements
  ", s" "search")
(which-key-add-key-based-replacements
  ", s s" "search-default")
(which-key-add-key-based-replacements
  ", s ." "search-restart")

;; search Search
(define-key evil-normal-state-map (kbd ", s s") 'deadgrep)
;; search restart
(define-key evil-normal-state-map (kbd ", s .") 'deadgrep-restart)
#+END_SRC

** Which-Key

#+BEGIN_SRC emacs-lisp :results silent
(setq which-key-idle-delay 0.5)
#+END_SRC
